from aiogram import types, Router, F
from aiogram.filters import CommandStart, Command
from keyboards import reply, inline

user_router = Router()

@user_router.message(CommandStart())
async def start(message: types.Message):
    await message.answer('–ü—Ä–∏–≤–µ—Ç! üèÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à —á–∞—Ç-–±–æ—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–µ –±–∞—Å–∫–µ—Ç–±–æ–ª—å–Ω—ã—Ö –º—è—á–µ–π! –ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥–µ—Ç–µ —à–∏—Ä–æ–∫–∏–π –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç –º—è—á–µ–π –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤ –ª—é–±–æ–≥–æ —É—Ä–æ–≤–Ω—è ‚Äî –æ—Ç –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö –¥–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–æ–≤. –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –æ –Ω–∞—à–∏—Ö —Ç–æ–≤–∞—Ä–∞—Ö, —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏–ª–∏ —É–∑–Ω–∞—Ç—å –æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ! –î–∞–≤–∞–π—Ç–µ –≤–º–µ—Å—Ç–µ –≤—ã–±–µ—Ä–µ–º –∏–¥–µ–∞–ª—å–Ω—ã–π –º—è—á –¥–ª—è –≤–∞—à–∏—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∏ –∏–≥—Ä. –ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å?', reply_markup=reply.main_kb)


@user_router.message(F.text.lower() == '–∫–∞—Ç–∞–ª–æ–≥')
@user_router.message(Command('catalog'))
async def catalog(messages: types.Message):
    await messages.answer("–ö–∞—Ç–∞–ª–æ–≥", reply_markup=reply.catalog_kb)


@user_router.message(F.text.lower() == '–ø—Ä–æ –Ω–∞—Å')
@user_router.message(Command('about'))
async def about(messages: types.Message):
    await messages.answer("–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.")


@user_router.message(F.text.lower() == '–∫–æ–Ω—Ç–∞–∫—Ç—ã')
@user_router.message(Command('contacts'))
async def contacts(messages: types.Message):
    await messages.answer("–ù–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤.")


@user_router.message(F.text.lower() == '–∞–¥—Ä–µ—Å–∞')
@user_router.message(Command('addresses'))
async def addresses(messages: types.Message):
    await messages.answer("–ù–∞—à–∏ –∞–¥—Ä–µ—Å–∞", reply_markup=inline.addresses_kb())

@user_router.callback_query(F.data.lower().startswith('addresses'))
async def addresses_info(callback: types.CallbackQuery):
    query = callback.data.split('_')[1]
    if query == '1':
        await callback.message.answer('–£–ª.–ü—É—à–∫–∏–Ω–∞ –¥–æ–º 45\n–ù–∞—Ö–æ–¥–∏—Ç—Å—è –º–µ–∂–¥—É –¥–≤—É–º—è –∫—Ä–∞—Å–Ω—ã–º–∏ –¥–æ–º–∞–º–∏.')
    elif query == '2':
        await callback.message.answer('–£–ª.–ü—É—à–∫–∏–Ω–∞ –¥–æ–º 31\n–ù–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –ø–µ—Ä–µ–∫—Ä—ë—Å—Ç–∫–µ –≤–æ–∑–ª–µ —ë–ª–∫–∏.')
    else:
        await callback.message.answer('–£–ª.–ü—É—à–∫–∏–Ω–∞ –¥–æ–º 67\n–£ –¥–æ–º–∞ –∑–µ–ª—ë–Ω–∞—è –∫—Ä—ã—à–∞.')
    await callback.answer('–ê–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.')

@user_router.message(F.text.lower() == '–Ω–∞–∑–∞–¥')
async def back_menu(messages: types.Message):
    await messages.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=reply.main_kb)


# @user_router.message(F.text)
# @user_router.message(F.photo)
# @user_router.message(F.text.lower() == '–¥–æ—Å—Ç–∞–≤–∫–∞')
# @user_router.message(F.text.lower().contains('–¥–æ—Å—Ç–∞–≤–∫'))
# @user_router.message(F.text.lower().startswith('–∫–∞–∫'))
# @user_router.message(F.text.lower().endswith('?'))
# @user_router.message(F.text.lower().startswith('–∫–∞–∫'), F.text.lower().endswith('?'))
# @user_router.message(F.text.lower().contains('—Ü–µ–Ω') | F.text.lower().contains('—Å—Ç–æ–∏–º–æ—Å—Ç'))
async def echo(message: types.Message):
    await message.answer('–ë–æ—Ç –ø–æ–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.')
    # user_text = message.text
    # await message.answer(user_text)
